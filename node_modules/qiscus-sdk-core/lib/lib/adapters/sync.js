"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SyncAdapter;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncIterator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncIterator"));

var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));

var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));

var _mitt = _interopRequireDefault(require("mitt"));

var _urlBuilder = _interopRequireDefault(require("../url-builder"));

var noop = function noop() {};

var sleep = function sleep(time) {
  return new Promise(function (res) {
    return setTimeout(res, time);
  });
};

function synchronizeFactory(getHttp, getInterval, getSync, getId, logger) {
  var emitter = (0, _mitt["default"])();

  var synchronize = function synchronize(messageId) {
    var url = (0, _urlBuilder["default"])('api/v2/sdk/sync').param('last_received_comment_id', messageId).build();
    return getHttp().get(url).then(function (resp) {
      var results = resp.body.results;
      var messages = results.comments;
      var lastMessageId = results.meta.last_received_comment_id;
      messages.sort(function (a, b) {
        return a.id - b.id;
      });
      return Promise.resolve({
        lastMessageId: lastMessageId,
        messages: messages,
        interval: getInterval()
      });
    })["catch"](noop);
  };

  function generator() {
    return _generator.apply(this, arguments);
  }

  function _generator() {
    _generator = (0, _wrapAsyncGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var accumulatedInterval, interval, shouldSync;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              accumulatedInterval = 0;
              interval = 100;

              shouldSync = function shouldSync() {
                return getHttp() != null && getSync();
              };

            case 3:
              if (!true) {
                _context.next = 13;
                break;
              }

              accumulatedInterval += interval;

              if (!(accumulatedInterval >= getInterval() && shouldSync())) {
                _context.next = 9;
                break;
              }

              accumulatedInterval = 0;
              _context.next = 9;
              return synchronize(getId());

            case 9:
              _context.next = 11;
              return (0, _awaitAsyncGenerator2["default"])(sleep(interval));

            case 11:
              _context.next = 3;
              break;

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _generator.apply(this, arguments);
  }

  return {
    get synchronize() {
      return synchronize;
    },

    get on() {
      return emitter.on;
    },

    get off() {
      return emitter.off;
    },

    run: function run() {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result, messageId, messages;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _context2.prev = 2;
                _iterator = (0, _asyncIterator2["default"])(generator());

              case 4:
                _context2.next = 6;
                return _iterator.next();

              case 6:
                _step = _context2.sent;
                _iteratorNormalCompletion = _step.done;
                _context2.next = 10;
                return _step.value;

              case 10:
                _value = _context2.sent;

                if (_iteratorNormalCompletion) {
                  _context2.next = 17;
                  break;
                }

                result = _value;

                try {
                  messageId = result.lastMessageId;
                  messages = result.messages;

                  if (messageId > getId()) {
                    messages.forEach(function (m) {
                      return emitter.emit('message.new', m);
                    });
                    emitter.emit('last-message-id.new', messageId);
                  }
                } catch (e) {
                  logger('error when sync', e.message);
                }

              case 14:
                _iteratorNormalCompletion = true;
                _context2.next = 4;
                break;

              case 17:
                _context2.next = 23;
                break;

              case 19:
                _context2.prev = 19;
                _context2.t0 = _context2["catch"](2);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 23:
                _context2.prev = 23;
                _context2.prev = 24;

                if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                  _context2.next = 28;
                  break;
                }

                _context2.next = 28;
                return _iterator["return"]();

              case 28:
                _context2.prev = 28;

                if (!_didIteratorError) {
                  _context2.next = 31;
                  break;
                }

                throw _iteratorError;

              case 31:
                return _context2.finish(28);

              case 32:
                return _context2.finish(23);

              case 33:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);
      }))();
    }
  };
}

function synchronizeEventFactory(getHttp, getInterval, getSync, getId, logger) {
  var emitter = (0, _mitt["default"])();

  var synchronize = function synchronize(messageId) {
    var url = (0, _urlBuilder["default"])('api/v2/sdk/sync_event').param('start_event_id', messageId).build();
    return getHttp().get(url).then(function (resp) {
      var events = resp.body.events;
      var lastId = events.map(function (it) {
        return it.id;
      }).sort(function (a, b) {
        return a - b;
      }).pop();
      var messageDelivered = events.filter(function (it) {
        return it.action_topic === 'delivered';
      }).map(function (it) {
        return it.payload.data;
      });
      var messageRead = events.filter(function (it) {
        return it.action_topic === 'read';
      }).map(function (it) {
        return it.payload.data;
      });
      var messageDeleted = events.filter(function (it) {
        return it.action_topic === 'delete_message';
      }).map(function (it) {
        return it.payload.data;
      });
      var roomCleared = events.filter(function (it) {
        return it.action_topic === 'clear_room';
      }).map(function (it) {
        return it.payload.data;
      });
      return Promise.resolve({
        lastId: lastId,
        messageDelivered: messageDelivered,
        messageRead: messageRead,
        messageDeleted: messageDeleted,
        roomCleared: roomCleared,
        interval: getInterval()
      });
    })["catch"](noop);
  };

  function generator() {
    return _generator2.apply(this, arguments);
  }

  function _generator2() {
    _generator2 = (0, _wrapAsyncGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      var accumulatedInterval, interval, shouldSync;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              accumulatedInterval = 0;
              interval = 100;

              shouldSync = function shouldSync() {
                return getHttp() != null && getSync();
              };

            case 3:
              if (!true) {
                _context3.next = 13;
                break;
              }

              accumulatedInterval += interval;

              if (!(accumulatedInterval >= getInterval() && shouldSync())) {
                _context3.next = 9;
                break;
              }

              accumulatedInterval = 0;
              _context3.next = 9;
              return synchronize(getId());

            case 9:
              _context3.next = 11;
              return (0, _awaitAsyncGenerator2["default"])(sleep(interval));

            case 11:
              _context3.next = 3;
              break;

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _generator2.apply(this, arguments);
  }

  return {
    get synchronize() {
      return synchronize;
    },

    get on() {
      return emitter.on;
    },

    get off() {
      return emitter.off;
    },

    run: function run() {
      return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, result, eventId;

        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _context4.prev = 2;
                _iterator2 = (0, _asyncIterator2["default"])(generator());

              case 4:
                _context4.next = 6;
                return _iterator2.next();

              case 6:
                _step2 = _context4.sent;
                _iteratorNormalCompletion2 = _step2.done;
                _context4.next = 10;
                return _step2.value;

              case 10:
                _value2 = _context4.sent;

                if (_iteratorNormalCompletion2) {
                  _context4.next = 17;
                  break;
                }

                result = _value2;

                try {
                  eventId = result.lastId;

                  if (eventId > getId()) {
                    emitter.emit('last-event-id.new', eventId);
                    result.messageDelivered.forEach(function (it) {
                      return emitter.emit('message.delivered', it);
                    });
                    result.messageDeleted.forEach(function (it) {
                      return emitter.emit('message.deleted', it);
                    });
                    result.messageRead.forEach(function (it) {
                      return emitter.emit('message.read', it);
                    });
                    result.roomCleared.forEach(function (it) {
                      return emitter.emit('room.cleared', it);
                    });
                  }
                } catch (e) {
                  logger('error when sync event', e.message);
                }

              case 14:
                _iteratorNormalCompletion2 = true;
                _context4.next = 4;
                break;

              case 17:
                _context4.next = 23;
                break;

              case 19:
                _context4.prev = 19;
                _context4.t0 = _context4["catch"](2);
                _didIteratorError2 = true;
                _iteratorError2 = _context4.t0;

              case 23:
                _context4.prev = 23;
                _context4.prev = 24;

                if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                  _context4.next = 28;
                  break;
                }

                _context4.next = 28;
                return _iterator2["return"]();

              case 28:
                _context4.prev = 28;

                if (!_didIteratorError2) {
                  _context4.next = 31;
                  break;
                }

                throw _iteratorError2;

              case 31:
                return _context4.finish(28);

              case 32:
                return _context4.finish(23);

              case 33:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[2, 19, 23, 33], [24,, 28, 32]]);
      }))();
    }
  };
}

function SyncAdapter(getHttpAdapter, _ref) {
  var _ref$isDebug = _ref.isDebug,
      isDebug = _ref$isDebug === void 0 ? false : _ref$isDebug,
      syncInterval = _ref.syncInterval,
      getShouldSync = _ref.getShouldSync,
      syncOnConnect = _ref.syncOnConnect,
      lastCommentId = _ref.lastCommentId,
      statusLogin = _ref.statusLogin,
      enableSync = _ref.enableSync,
      enableSyncEvent = _ref.enableSyncEvent;
  var emitter = (0, _mitt["default"])();

  var logger = function logger() {
    var _console;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return isDebug ? (_console = console).log.apply(_console, ['QSync:'].concat(args)) : {};
  };

  var lastMessageId = 0;
  var lastEventId = 0;

  var getInterval = function getInterval() {
    if (statusLogin()) {
      if (getShouldSync()) return syncInterval();
      return syncOnConnect();
    }

    return 0;
  };

  var _getShouldSync = function _getShouldSync() {
    return getShouldSync() && enableSync();
  };

  var syncFactory = synchronizeFactory(getHttpAdapter, getInterval, _getShouldSync, lastCommentId, logger);
  syncFactory.on('last-message-id.new', function (id) {
    return lastMessageId = id;
  });
  syncFactory.on('message.new', function (m) {
    return emitter.emit('message.new', m);
  });
  syncFactory.run()["catch"](function (err) {
    return logger('got error when sync', err);
  });

  var _getShouldSyncEvent = function _getShouldSyncEvent() {
    return getShouldSync() && enableSyncEvent();
  };

  var syncEventFactory = synchronizeEventFactory(getHttpAdapter, getInterval, _getShouldSyncEvent, function () {
    return lastEventId;
  }, logger);
  syncEventFactory.on('last-event-id.new', function (id) {
    lastEventId = id;
  });
  syncEventFactory.on('message.read', function (it) {
    emitter.emit('message.read', it);
  });
  syncEventFactory.on('message.delivered', function (it) {
    return emitter.emit('message.delivered', it);
  });
  syncEventFactory.on('message.deleted', function (it) {
    return emitter.emit('message.deleted', it);
  });
  syncEventFactory.on('room.cleared', function (it) {
    return emitter.emit('room.cleared', it);
  });
  syncEventFactory.run()["catch"](function (err) {
    return logger('got error when sync event', err);
  });
  return {
    get on() {
      return emitter.on;
    },

    get off() {
      return emitter.off;
    },

    synchronize: function synchronize() {
      syncFactory.synchronize();
    },
    synchronizeEvent: function synchronizeEvent() {
      syncEventFactory.synchronize();
    }
  };
}

module.exports = exports.default;