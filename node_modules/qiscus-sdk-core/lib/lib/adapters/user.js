"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _urlBuilder = _interopRequireDefault(require("../url-builder"));

var User = /*#__PURE__*/function () {
  /**
   * Params used in this class
   * @method constructor
   * @param  {Object}    HTTPAdapter [Qiscus HTTP adapter]
   * @return {void}                Returns nothing
   */
  function User(HTTPAdapter) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, User);
    (0, _defineProperty2["default"])(this, "updateCommentStatus", (0, _lodash["default"])(function (roomId, lastReadCommentId, lastReceivedCommentId) {
      var body = {
        room_id: roomId
      };
      if (lastReadCommentId) body.last_comment_read_id = lastReadCommentId;

      if (lastReceivedCommentId) {
        body.last_comment_received_id = lastReceivedCommentId;
      }

      return _this.HTTPAdapter.post('api/v2/sdk/update_comment_status', body);
    }, 500));
    this.HTTPAdapter = HTTPAdapter;
    this.token = HTTPAdapter.token;
  }

  (0, _createClass2["default"])(User, [{
    key: "postComment",
    value: function postComment(topicId, commentMessage, uniqueId, type, payload, extras) {
      return this.HTTPAdapter.post_json("api/v2/sdk/post_comment", {
        comment: commentMessage,
        topic_id: topicId,
        unique_temp_id: uniqueId,
        type: type,
        payload: payload,
        extras: extras
      }).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.comment);
      });
    }
  }, {
    key: "loadRoomList",
    value: function loadRoomList() {
      var _params$room_type;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var url = (0, _urlBuilder["default"])('api/v2/sdk/user_rooms').param('page', params.page).param('show_participants', params.show_participants || true).param('limit', params.limit).param('show_empty', params.show_empty).param('room_type', (_params$room_type = params.room_type) !== null && _params$room_type !== void 0 ? _params$room_type : 'default').build();
      return this.HTTPAdapter.get(url).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.rooms_info);
      });
    }
  }, {
    key: "searchMessages",
    value: function searchMessages(params) {
      var body = {
        query: params.query || null,
        room_id: params.room_id || null,
        last_comment_id: params.last_comment_id || null
      };
      return this.HTTPAdapter.post('api/v2/sdk/search_messages', body).then(function (res) {
        return res.body.results.comments;
      });
    }
  }, {
    key: "updateProfile",
    value: function updateProfile(params) {
      var body = {
        name: params.name || null,
        avatar_url: params.avatar_url || null,
        extras: params.extras ? JSON.stringify(params.extras) : null
      };
      return this.HTTPAdapter.patch('api/v2/sdk/my_profile', body).then(function (res) {
        return res.body.results.user;
      });
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(file) {
      var body = {
        file: file
      };
      return this.HTTPAdapter.post("api/v2/sdk/upload", body).then(function (res) {
        return res.body;
      });
    }
  }, {
    key: "getRoomsInfo",
    value: function getRoomsInfo(opts) {
      var body = {
        show_participants: true,
        show_removed: false
      };
      if (opts.room_ids) body.room_id = opts.room_ids;
      if (opts.room_unique_ids) body.room_unique_id = opts.room_unique_ids;
      if (opts.show_participants) body.show_participants = opts.show_participants;
      if (opts.show_removed) body.show_removed = opts.show_removed;
      return this.HTTPAdapter.post_json("api/v2/sdk/rooms_info", body).then(function (res) {
        return res.body;
      });
    }
  }, {
    key: "loadComments",
    value: function loadComments(topicId, options) {
      var url = (0, _urlBuilder["default"])('api/v2/sdk/load_comments').param('topic_id', topicId).param('last_comment_id', options.last_comment_id).param('timestamp', options.timestamp).param('after', options.after).param('limit', options.limit).build();
      return this.HTTPAdapter.get(url).then(function (res) {
        if (res.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.comments);
      });
    }
  }, {
    key: "deleteComment",
    value: function deleteComment(roomId, commentUniqueIds) {
      var isForEveryone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var isHard = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

      if (isForEveryone === false) {
        console.warn('Deprecated: delete comment for me will be removed on next release');
      }

      if (isHard === false) {
        console.warn('Deprecated: soft delete will be removed on next release');
      }

      var body = {
        unique_ids: commentUniqueIds,
        is_delete_for_everyone: isForEveryone,
        is_hard_delete: isHard
      };
      return this.HTTPAdapter.del("api/v2/sdk/delete_messages", body).then(function (res) {
        return res.body;
      });
    }
  }, {
    key: "clearRoomMessages",
    value: function clearRoomMessages(roomIds) {
      var body = {
        room_channel_ids: roomIds
      };
      return this.HTTPAdapter.del("api/v2/sdk/clear_room_messages", body).then(function (res) {
        return res.body;
      });
    }
  }, {
    key: "getCommentReceiptStatus",
    value: function getCommentReceiptStatus(id) {
      return this.HTTPAdapter.get("api/v2/sdk/comment_receipt?comment_id=".concat(id)).then(function (res) {
        return res.body;
      });
    }
  }, {
    key: "getBlockedUser",
    value: function getBlockedUser() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
      var url = "api/v2/sdk/get_blocked_users?page=".concat(page, "&limit=").concat(limit);
      return this.HTTPAdapter.get(url).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.blocked_users);
      });
    }
  }, {
    key: "blockUser",
    value: function blockUser(email) {
      if (!email) throw new Error('email is required');
      var params = {
        user_email: email
      };
      return this.HTTPAdapter.post("api/v2/sdk/block_user", params).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.user);
      });
    }
  }, {
    key: "unblockUser",
    value: function unblockUser(email) {
      if (!email) throw new Error('email is required');
      var params = {
        user_email: email
      };
      return this.HTTPAdapter.post("api/v2/sdk/unblock_user", params).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.user);
      });
    }
  }, {
    key: "getProfile",
    value: function getProfile() {
      return this.HTTPAdapter.get("api/v2/sdk/my_profile").then(function (res) {
        return res.body.results.user;
      });
    }
  }, {
    key: "getUserPresences",
    value: function getUserPresences(email) {
      var params = {
        user_ids: email
      };
      return this.HTTPAdapter.post_json("api/v2/sdk/users/status", params).then(function (res) {
        if (res.body.status !== 200) return Promise.reject(res);
        return Promise.resolve(res.body.results.user_status);
      });
    }
  }, {
    key: "updateMessage",
    value: function updateMessage(message) {
      var data = {
        token: this.token,
        comment: message.message,
        unique_id: message.unique_id || message.unique_temp_id
      };
      if (message.extras != null) data['extras'] = message.extras;
      if (message.payload != null) data['payload'] = message.payload;
      return this.HTTPAdapter.post_json('api/v2/sdk/update_message', data).then(function (r) {
        return r.body.results.comment;
      });
    }
  }]);
  return User;
}();

exports["default"] = User;
module.exports = exports.default;